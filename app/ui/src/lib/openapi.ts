/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api::v1::accounts::create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api::v1::accounts::me::get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["api::v1::accounts::me::password::change"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api::v1::collections::list"];
        put?: never;
        post: operations["api::v1::collections::create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collections/{collection_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api::v1::collections::get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api::v1::collections::update"];
        trace?: never;
    };
    "/api/v1/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api::v1::files::list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api::v1::files::get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/{file_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["api::v1::files::tags::update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["files::upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{file_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["files::download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountInfo: {
            /** Format: uuid */
            id: string;
            username: string;
        };
        ApiError: {
            details: {
                [key: string]: unknown;
            };
            error: string;
            message: string;
        };
        CollectionData: {
            files: string[];
            filter: string;
            /** Format: uuid */
            id: string;
            name: string;
        };
        CreateAccount: {
            password: string;
            username: string;
        };
        CreateCollection: {
            filter: string;
            name: string;
        };
        Cursor: string;
        FileData: {
            content_type: string;
            id: string;
            name: string;
            size: number;
            tags: components["schemas"]["Tag"][];
        };
        Page_CollectionData: {
            items: {
                files: string[];
                filter: string;
                /** Format: uuid */
                id: string;
                name: string;
            }[];
            next?: null | components["schemas"]["Cursor"];
            previous?: null | components["schemas"]["Cursor"];
        };
        Page_FileData: {
            items: {
                content_type: string;
                id: string;
                name: string;
                size: number;
                tags: components["schemas"]["Tag"][];
            }[];
            next?: null | components["schemas"]["Cursor"];
            previous?: null | components["schemas"]["Cursor"];
        };
        Tag: {
            key: string;
            value?: string | null;
        };
        UpdateCollection: {
            filter?: string | null;
            name?: string | null;
        };
        UpdatePassword: {
            password: string;
        };
        UpdateTags: {
            tags: string[];
        };
    };
    responses: {
        AccountCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AccountInfo"];
            };
        };
        ApiError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiError"];
            };
        };
        CollectionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CollectionData"];
            };
        };
        CollectionUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CollectionData"];
            };
        };
        TagsUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FileData"];
            };
        };
        UploadCompleted: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaAccountInfo = components['schemas']['AccountInfo'];
export type SchemaApiError = components['schemas']['ApiError'];
export type SchemaCollectionData = components['schemas']['CollectionData'];
export type SchemaCreateAccount = components['schemas']['CreateAccount'];
export type SchemaCreateCollection = components['schemas']['CreateCollection'];
export type SchemaCursor = components['schemas']['Cursor'];
export type SchemaFileData = components['schemas']['FileData'];
export type SchemaPageCollectionData = components['schemas']['Page_CollectionData'];
export type SchemaPageFileData = components['schemas']['Page_FileData'];
export type SchemaTag = components['schemas']['Tag'];
export type SchemaUpdateCollection = components['schemas']['UpdateCollection'];
export type SchemaUpdatePassword = components['schemas']['UpdatePassword'];
export type SchemaUpdateTags = components['schemas']['UpdateTags'];
export type ResponseAccountCreated = components['responses']['AccountCreated'];
export type ResponseApiError = components['responses']['ApiError'];
export type ResponseCollectionCreated = components['responses']['CollectionCreated'];
export type ResponseCollectionUpdated = components['responses']['CollectionUpdated'];
export type ResponseTagsUpdated = components['responses']['TagsUpdated'];
export type ResponseUploadCompleted = components['responses']['UploadCompleted'];
export type $defs = Record<string, never>;
export interface operations {
    "api::v1::accounts::create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccount"];
            };
        };
        responses: {
            201: components["responses"]["AccountCreated"];
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::accounts::me::get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountInfo"];
                };
            };
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::accounts::me::password::change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePassword"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::collections::list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_CollectionData"];
                };
            };
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::collections::create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCollection"];
            };
        };
        responses: {
            201: components["responses"]["CollectionCreated"];
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::collections::get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollectionData"];
                };
            };
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::collections::update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCollection"];
            };
        };
        responses: {
            200: components["responses"]["CollectionUpdated"];
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::files::list": {
        parameters: {
            query?: {
                /** @description The OxiQL filter to search files for.
                 *     Mutually exclusive with `ids` */
                search?: string | null;
                /** @description The list of File IDs to load. Non-existent IDs will be ignored.
                 *     Mutually exclusive with `search` */
                id?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_FileData"];
                };
            };
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::files::get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileData"];
                };
            };
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "api::v1::files::tags::update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTags"];
            };
        };
        responses: {
            200: components["responses"]["TagsUpdated"];
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "files::upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            201: components["responses"]["UploadCompleted"];
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
    "files::download": {
        parameters: {
            query: {
                force: boolean;
            };
            header?: never;
            path: {
                file_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Raw content of the file. The actual content type varies based on the detected format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            "4XX": components["responses"]["ApiError"];
            "5XX": components["responses"]["ApiError"];
        };
    };
}

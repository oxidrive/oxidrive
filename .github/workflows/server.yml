name: Server

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
    paths:
      - .github/workflows/**
      - .cargo/**
      - app/**
      - bin/**
      - lib/**
      - migrations/**
      - Cargo.*
      - rust-toolchain.toml
  merge_group:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  NEXTEST_PROFILE: ci

concurrency:
  group: server-ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write

jobs:
  test:
    if: github.event.pull_request.draft == false
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: 'postgres:16-alpine'
        env:
          POSTGRES_USER: oxidrive
          POSTGRES_PASSWORD: oxidrive
          POSTGRES_DB: oxidrive
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      minio:
        image: 'bitnami/minio'
        env:
          MINIO_ROOT_USER: oxidrive
          MINIO_ROOT_PASSWORD: oxidrive
          MINIO_DEFAULT_BUCKETS: oxidrive
        options: >-
          --health-cmd "curl http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000

    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never
      - uses: Swatinem/rust-cache@v2
      - run: nix flake check
      - run: mkdir -p app/ui/build

      - name: Run tests
        run: nix develop --command just test-rust
        env:
          DATABASE_URL: 'postgres://oxidrive:oxidrive@localhost:5432/oxidrive?sslmode=disable'
          OXIDRIVE_STORAGE__BUCKET: oxidrive
          OXIDRIVE_STORAGE__ENDPOINT: http://localhost:9000
          OXIDRIVE_STORAGE__REGION: local
          AWS_ACCESS_KEY_ID: oxidrive
          AWS_SECRET_ACCESS_KEY: oxidrive
      - name: Test Summary
        uses: test-summary/action@v2
        if: '!cancelled()'
        with:
          paths: "target/nextest/ci/junit.xml"
      # - name: Run mutations
      #   run: nix develop --command just test-mutations
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: mutants.out
      #     path: mutants.out

  check:
    if: github.event.pull_request.draft == false
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never
      - uses: Swatinem/rust-cache@v2
      - run: nix flake check

      - name: Check code
        run: nix develop --command just check-rust

  fmt:
    if: github.event.pull_request.draft == false
    name: Fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never
      - uses: Swatinem/rust-cache@v2
      - run: nix flake check

      - name: Check formatting
        run: nix develop --command just format-rust --check

  clippy:
    if: github.event.pull_request.draft == false
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never
      - uses: Swatinem/rust-cache@v2
      - run: nix flake check
      - run: mkdir -p app/ui/build

      - name: Check for issues
        run: nix develop --command just lint-rust

  policies:
    if: github.event.pull_request.draft == false
    name: Cedar Policies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never
      - uses: Swatinem/rust-cache@v2
      - run: nix flake check

      - name: Check policy formatting
        run: nix develop --command just format-cedar check
      - name: Validate policies against schema
        run: nix develop --command just check-cedar
